{
  "name": "node_jsrender",
  "version": "0.1.0",
  "description": "NodeJS port of JsRender: http://borismoore.github.com/jsrender/demos",
  "homepage": "https://github.com/alex-pilon/node_jsrender",
  "keywords": [
    "templating",
    "views engine",
    "express"
  ],
  "author": {
    "name": "Ported by Alex Pilon, originally written by Boris Moore",
    "url": "and team"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alex-pilon/node_jsrender.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# JsRender: Next generation NodeJS Templates\nOptimized for high-performance pure string-based rendering, without DOM or jQuery hassle dependency. (Current version - \"codeless\" tag syntax)\n\nOriginal demos: [http://borismoore.github.com/jsrender/demos/step-by-step/index.html](http://borismoore.github.com/jsrender/demos/step-by-step/index.html).\nSee also [JsViews step-by-step samples](http://borismoore.github.com/jsviews/demos/step-by-step/index.html)\n\n### Without Express\n\nAfter you clone this module with npm or git:\n\ngit clone git://github.com/alex-pilon/node_jsrender.git\nOR\nnpm install node_jsrender\n\n**// server.js**\n\n    var jsrender = require('jsrender');\n\n    process.on('start', function () {\n      jsrender.template(\"yourtemplate\", \"{{=myvar}}\");\n      var result = jsrender.render(\"yourtemplate\", {myvar:\"Hello World!\"});\n      \n      console.log(result);\n    });\n\nYields:\n\n    <h4>Hello World</h4>;\n\n### With Express\n\nBut who _isn't_ using express these days?\n\n**// server.js**\n\n    var jsrender = require('jsrender');\n    var express = require('express');\n\n    var app = express.createServer();\n\n    // TODO Make sure this is right\n    app.register('jsrender', jsrender.express);\n\n    app.set(\"view options\", { layout: false });\n\n    app.get('/', function (req, res) {\n      var data = {people:[{name:\"Alex\",age:23},{name:\"Waldo\",age:34}],things:\"Render all the things!\"};\n      res.render('index.jsrender', {meta: {title: \"List of stuff\"}, data: data});\n    });\n\n    app.listen(8080);\n\n\n**// index.jsrender**\n\n    {{=meta.title}}\n\n    People!\n    {{#each data.people}}\n      {{=name}} is {{=age}}\n    {{/each}}\n\n\n### Partials\n\n// TODO In the partial tag if an array of objects is passed in then loop over them with partial..?\nRefactoring the above index.jsrender template (pretending that we have a complex view of people data):\n\n**// index.jsrender**\n\n    {{=meta.title}}\n\n    People!\n    {{#each data.people}}\n      {{partial name=name age=age}}\n    {{/each}}\n\n**// person.jsrender**\n\n    {{=name}} is {{=age}}\n\n\n### Layout\n\nThis section demonstrates two features; \n1. Using layouts.\n2. The layout tag allows you to change the layout of a particular template.\n\n#### Using layouts \n\nFirst lets take the above example express server and remove the nonsense about not using a layout:\n\n**// server.js**\n\n    var jsrender = require('jsrender');\n    var express = require('express');\n\n    var app = express.createServer();\n\n    // TODO Make sure this is right\n    app.register('jsrender', jsrender.express);\n\n    // no more turn off layout\n\n    app.get('/', function (req, res) {\n      var data = {people:[{name:\"Alex\",age:23},{name:\"Waldo\",age:34}],things:\"Render all the things!\"};\n      res.render('index.jsrender', {meta: {title: \"List of stuff\"}, data: data});\n    });\n\n    app.listen(8080);\n\n**// layout.jsrender**\n\n    TODO: How does this get here.. can a template pass variables to the layout using something like a block?\n    {{=body}}\n\nThe layout template automatically receives a variable called body which contains the rendered result of the content template, e.g.; index.js\n\n**// index.js**\n    My Interesting Observations about Niches\n    This is my content section where I detail something very interesting about a very niche subject.  \n\n    Favorite Links\n\n    NodeJS\n    jQuery\n    Other great new technologies\n\n#### The layout tag\n    \nTODO  \n\n### Templatable Templates / Script Blocks containing templates for use on the client\n\nOkay, so far so good. Now the real value (read: what I really like about this) is that using this templating library gives me a single codebase that can work on the same templates on both the client and the server.\nOne of the problems you may not have thought of is what happens if you have a template that rendered on the server that has an inline template that is meant to be used on the client. Because it is using the same syntax there is some overlap here. We don't want the client template to be rendered at all.\n\nPart of the express wrapper includes a tag syntax that is converted to the regular template syntax post render.\n\nIn a server template, {% and %} will be converted to {{ and }} respectively.\n\n// TODO Remove the tmpl tag and put the tag conversion in the compile method.\n\n**// index.js**\n\n    This is a template. This is my variable: {%=myvariable%}\n    A quick example of using templatable templates.\n\nOnce this is rendered the output returned will look like\n\n**// index.js (rendered)**\n\n    This is a template. This is my variable: {{=myvariable}}\n\nThis inline template is now ready to be used on the client.\n\nYou can mix and match this syntax to do something interesting things that I have not yet experimented with yet.\n\n### Reusing Partials on the Server and Client\n\nI have yet to add this functionality.. I may need to do some tricky business to accomplish this.\n",
  "readmeFilename": "README.md",
  "_id": "node_jsrender@0.1.0",
  "dist": {
    "shasum": "2cd5b983b611127a95c879af77a982f291f0783c"
  },
  "_from": "node_jsrender"
}
